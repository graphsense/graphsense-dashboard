{-
   GraphSense API
   GraphSense API provides programmatic access to various ledgers' addresses, entities, blocks, transactions and tags for automated and highly efficient forensics tasks.

   The version of the OpenAPI document: 1.11.2
   Contact: contact@ikna.io

   NOTE: This file is auto generated by the openapi-generator.
   https://github.com/openapitools/openapi-generator.git

   DO NOT EDIT THIS FILE MANUALLY.

   For more info on generating Elm code, see https://eriktim.github.io/openapi-elm/
-}


module Api.Request.Addresses exposing (..)

import Api
import Api.Data
import Dict
import Http
import Json.Decode
import Json.Encode








type Direction
    = DirectionIn
    | DirectionOut


directionVariants : List Direction
directionVariants =
    [ DirectionIn
    , DirectionOut
    ]


stringFromDirection : Direction -> String
stringFromDirection model =
    case model of
        DirectionIn ->
            "in"

        DirectionOut ->
            "out"


makeDirectionFromString : String -> Maybe Direction
makeDirectionFromString str =
    case str of
    "in" ->
        Just DirectionIn

    "out" ->
        Just DirectionOut

    _ ->
        Nothing





type Order_
    = Order_Asc
    | Order_Desc


orderVariants : List Order_
orderVariants =
    [ Order_Asc
    , Order_Desc
    ]


stringFromOrder_ : Order_ -> String
stringFromOrder_ model =
    case model of
        Order_Asc ->
            "asc"

        Order_Desc ->
            "desc"


makeOrder_FromString : String -> Maybe Order_
makeOrder_FromString str =
    case str of
    "asc" ->
        Just Order_Asc

    "desc" ->
        Just Order_Desc

    _ ->
        Nothing






getAddress : (String) -> (String) -> Maybe (Bool) -> Api.Request Api.Data.Address
getAddress currency_path address_path includeActors_query =
    Api.request
        "GET"
        "/{currency}/addresses/{address}"
        [ ( "currency", identity currency_path ), ( "address", identity address_path ) ]
        [ ( "include_actors", Maybe.map ((\val -> if val then "true" else "false")) includeActors_query ) ]
        []
        Nothing
        Api.Data.addressDecoder



getAddressEntity : (String) -> (String) -> Maybe (Bool) -> Api.Request Api.Data.Entity
getAddressEntity currency_path address_path includeActors_query =
    Api.request
        "GET"
        "/{currency}/addresses/{address}/entity"
        [ ( "currency", identity currency_path ), ( "address", identity address_path ) ]
        [ ( "include_actors", Maybe.map ((\val -> if val then "true" else "false")) includeActors_query ) ]
        []
        Nothing
        Api.Data.entityDecoder



getTagSummaryByAddress : (String) -> (String) -> Maybe (Bool) -> Api.Request Api.Data.TagSummary
getTagSummaryByAddress currency_path address_path includeBestClusterTag_query =
    Api.request
        "GET"
        "/{currency}/addresses/{address}/tag_summary"
        [ ( "currency", identity currency_path ), ( "address", identity address_path ) ]
        [ ( "include_best_cluster_tag", Maybe.map ((\val -> if val then "true" else "false")) includeBestClusterTag_query ) ]
        []
        Nothing
        Api.Data.tagSummaryDecoder



listAddressLinks : (String) -> (String) -> (String) -> Maybe (Int) -> Maybe (Int) -> Maybe (Order_) -> Maybe (String) -> Maybe (Int) -> Api.Request Api.Data.Links
listAddressLinks currency_path address_path neighbor_query minHeight_query maxHeight_query order_query page_query pagesize_query =
    Api.request
        "GET"
        "/{currency}/addresses/{address}/links"
        [ ( "currency", identity currency_path ), ( "address", identity address_path ) ]
        [ ( "neighbor", Just <| (identity) neighbor_query ), ( "min_height", Maybe.map (String.fromInt) minHeight_query ), ( "max_height", Maybe.map (String.fromInt) maxHeight_query ), ( "order", Maybe.map (stringFromOrder_) order_query ), ( "page", Maybe.map (identity) page_query ), ( "pagesize", Maybe.map (String.fromInt) pagesize_query ) ]
        []
        Nothing
        Api.Data.linksDecoder



listAddressNeighbors : (String) -> (String) -> (Direction) -> Maybe (List String) -> Maybe (Bool) -> Maybe (Bool) -> Maybe (String) -> Maybe (Int) -> Api.Request Api.Data.NeighborAddresses
listAddressNeighbors currency_path address_path direction_query onlyIds_query includeLabels_query includeActors_query page_query pagesize_query =
    Api.request
        "GET"
        "/{currency}/addresses/{address}/neighbors"
        [ ( "currency", identity currency_path ), ( "address", identity address_path ) ]
        [ ( "direction", Just <| (stringFromDirection) direction_query ), ( "only_ids", Maybe.map (String.join "," << List.map identity) onlyIds_query ), ( "include_labels", Maybe.map ((\val -> if val then "true" else "false")) includeLabels_query ), ( "include_actors", Maybe.map ((\val -> if val then "true" else "false")) includeActors_query ), ( "page", Maybe.map (identity) page_query ), ( "pagesize", Maybe.map (String.fromInt) pagesize_query ) ]
        []
        Nothing
        Api.Data.neighborAddressesDecoder



listAddressTxs : (String) -> (String) -> Maybe (Direction) -> Maybe (Int) -> Maybe (Int) -> Maybe (Order_) -> Maybe (String) -> Maybe (String) -> Maybe (Int) -> Api.Request Api.Data.AddressTxs
listAddressTxs currency_path address_path direction_query minHeight_query maxHeight_query order_query tokenCurrency_query page_query pagesize_query =
    Api.request
        "GET"
        "/{currency}/addresses/{address}/txs"
        [ ( "currency", identity currency_path ), ( "address", identity address_path ) ]
        [ ( "direction", Maybe.map (stringFromDirection) direction_query ), ( "min_height", Maybe.map (String.fromInt) minHeight_query ), ( "max_height", Maybe.map (String.fromInt) maxHeight_query ), ( "order", Maybe.map (stringFromOrder_) order_query ), ( "token_currency", Maybe.map (identity) tokenCurrency_query ), ( "page", Maybe.map (identity) page_query ), ( "pagesize", Maybe.map (String.fromInt) pagesize_query ) ]
        []
        Nothing
        Api.Data.addressTxsDecoder



listTagsByAddress : (String) -> (String) -> Maybe (String) -> Maybe (Int) -> Maybe (Bool) -> Api.Request Api.Data.AddressTags
listTagsByAddress currency_path address_path page_query pagesize_query includeBestClusterTag_query =
    Api.request
        "GET"
        "/{currency}/addresses/{address}/tags"
        [ ( "currency", identity currency_path ), ( "address", identity address_path ) ]
        [ ( "page", Maybe.map (identity) page_query ), ( "pagesize", Maybe.map (String.fromInt) pagesize_query ), ( "include_best_cluster_tag", Maybe.map ((\val -> if val then "true" else "false")) includeBestClusterTag_query ) ]
        []
        Nothing
        Api.Data.addressTagsDecoder

