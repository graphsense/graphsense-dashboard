module Plugin.Update exposing (..)

{{#plugins}}
import {{package}}.Model
import {{package}}.Msg
{{/plugins}}
import Config.Update as Update
import Maybe.Extra
import Model.Graph.Address as Address
import Model.Graph.Entity as Entity
import Model.Graph.Id as Id
import Plugin.Model
import Plugin.Msg
import PluginInterface.Msg
import PluginInterface.Update
import Set exposing (Set)
import Tuple3 as T3


type alias Plugins =
    { {{#plugins}}{{name}} : Maybe (PluginInterface.Update.Update {{package}}.Model.Flags {{package}}.Model.Model {{package}}.Model.AddressState {{package}}.Model.EntityState {{package}}.Msg.Msg {{package}}.Msg.AddressMsg {{package}}.Msg.EntityMsg)
    {{^last}}, {{/last}}{{/plugins}}
    }

empty : Plugins
empty =
    { {{#plugins}}{{name}} = Nothing
    {{^last}}, {{/last}}{{/plugins}}
    }

n m =
  (m, [], Cmd.none)

update : Plugins -> Update.Config -> Plugin.Msg.Msg -> Plugin.Model.ModelState -> ( Plugin.Model.ModelState, List Plugin.Msg.OutMsg, Cmd Plugin.Msg.Msg )
update plugins uc msg state =
    case msg of
        Plugin.Msg.NoOp ->
            ( state, [], Cmd.none ){{#plugins}} 

        Plugin.Msg.{{package}}Msg m ->
            plugins.{{name}}
                |> Maybe.andThen
                    (\plugin ->
                        Maybe.map2
                            (\upd st ->
                                upd uc m st
                                    |> T3.mapFirst (\s -> { state | {{name}} = Just s })
                                    |> T3.mapSecond (List.map (PluginInterface.Msg.mapOutMsg "{{name}}" Plugin.Msg.{{package}}Msg Plugin.Msg.{{package}}AddressMsg Plugin.Msg.{{package}}EntityMsg))
                                    |> T3.mapThird (Cmd.map Plugin.Msg.{{package}}Msg)
                            )
                            plugin.update
                            state.{{name}}
                    )
                |> Maybe.withDefault ( state, [], Cmd.none ){{/plugins}} 


shallPushHistory : Plugins -> Plugin.Msg.Msg -> Bool
shallPushHistory plugins msg =
    case msg of
        Plugin.Msg.NoOp ->
            ( False ){{#plugins}}

        Plugin.Msg.{{package}}Msg m ->
            plugins.{{name}}
                |> Maybe.andThen
                    (\plugin ->
                        Maybe.map
                            (\upd ->
                                upd m)
                            plugin.shallPushHistory
                    )
            |> Maybe.withDefault ( False ){{/plugins}}


updateByCoreMsg : Plugins -> Update.Config -> Plugin.Model.ModelState -> PluginInterface.Msg.InMsg -> ( Plugin.Model.ModelState, List Plugin.Msg.OutMsg, Cmd Plugin.Msg.Msg )
updateByCoreMsg plugins uc state msg =
    let
        updateFns = {{#plugins}} (\currentState cEffects cmds ->
                                plugins.{{name}}
                                        |> Maybe.map
                                            (\plugin ->
                                                Maybe.map2
                                                    (\upd st ->
                                                        upd uc msg st
                                                            |> T3.mapFirst (\s -> { currentState | {{name}} = Just s })
                                                            |> T3.mapSecond ((List.map (PluginInterface.Msg.mapOutMsg "{{name}}" Plugin.Msg.{{package}}Msg Plugin.Msg.{{package}}AddressMsg Plugin.Msg.{{package}}EntityMsg)))
                                                            |> T3.mapSecond ((++) cEffects)
                                                            |> T3.mapThird (Cmd.map Plugin.Msg.{{package}}Msg)
                                                            |> T3.mapThird (\ncmds -> Cmd.batch [cmds, ncmds])
                                                    )
                                                    plugin.updateByCoreMsg
                                                    currentState.{{name}}
                                            )
                                        |> Maybe.Extra.join
                                        |> Maybe.withDefault ( currentState, cEffects, cmds )
                        )::                
                        {{/plugins}} []

        step f acc =
                let
                    (s, eff, cmds) = acc
                in
                    f s eff cmds
    in
        List.foldl step (state, [], Cmd.none) updateFns
        

updateAddress : Plugins -> Plugin.Msg.AddressMsg -> { a | plugins : Plugin.Model.AddressState } -> { a | plugins : Plugin.Model.AddressState }
updateAddress plugins msg address =
    {{^plugins}}address{{/plugins}}{{#plugins.length}}case msg of{{#plugins}} 
        Plugin.Msg.{{package}}AddressMsg m ->
            plugins.{{name}}
                |> Maybe.andThen
                    (\plugin ->
                        Maybe.map2
                            (\upd st ->
                                { address
                                    | plugins =
                                        address.plugins
                                            |> (\pl ->
                                                    { pl
                                                        | {{name}} = upd m st |> Just
                                                    }
                                               )
                                }
                            )
                            plugin.updateAddress
                            address.plugins.{{name}}
                    )
                |> Maybe.withDefault address{{/plugins}}{{/plugins.length}}


updateEntity : Plugins -> Plugin.Msg.EntityMsg -> { a | plugins : Plugin.Model.EntityState } -> { a | plugins : Plugin.Model.EntityState }
updateEntity plugins msg entity =
    {{^plugins}}entity{{/plugins}}{{#plugins.length}}case msg of{{#plugins}} 
        Plugin.Msg.{{package}}EntityMsg m ->
            plugins.{{name}}
                |> Maybe.andThen
                    (\plugin ->
                        Maybe.map2
                            (\upd st ->
                                { entity
                                    | plugins =
                                        entity.plugins
                                            |> (\pl ->
                                                    { pl
                                                        | {{name}} = upd m st |> Just
                                                    }
                                               )
                                }
                            )
                            plugin.updateEntity
                            entity.plugins.{{name}}
                    )
                |> Maybe.withDefault entity{{/plugins}}{{/plugins.length}}


updateByUrl : Plugin.Model.PluginType -> Plugins -> Update.Config -> String -> Plugin.Model.ModelState -> ( Plugin.Model.ModelState, List Plugin.Msg.OutMsg, Cmd Plugin.Msg.Msg )
updateByUrl ns plugins uc url state =
    {{^plugins}}n state{{/plugins}}{{#plugins.length}}case ns of{{#plugins}} 
        Plugin.Model.{{package}} ->
            plugins.{{name}}
                |> Maybe.andThen
                    (\plugin ->
                        Maybe.map2
                            (\upd st ->
                                upd uc url st
                                    |> T3.mapFirst (\s -> { state | {{name}} = Just s })
                                    |> T3.mapSecond (List.map (PluginInterface.Msg.mapOutMsg "{{name}}" Plugin.Msg.{{package}}Msg Plugin.Msg.{{package}}AddressMsg Plugin.Msg.{{package}}EntityMsg))
                                    |> T3.mapThird (Cmd.map Plugin.Msg.{{package}}Msg)
                            )
                            plugin.updateByUrl
                            state.{{name}}
                    )
                |> Maybe.withDefault ( state, [], Cmd.none )
{{/plugins}} 
{{/plugins.length}} 


updateGraphByUrl : Plugin.Model.PluginType -> Plugins -> String -> Plugin.Model.ModelState -> ( Plugin.Model.ModelState, List Plugin.Msg.OutMsg, Cmd Plugin.Msg.Msg )
updateGraphByUrl ns plugins url state =
    {{^plugins}}n state{{/plugins}}{{#plugins.length}}case ns of{{#plugins}} 
        Plugin.Model.{{package}} ->
            plugins.{{name}}
                |> Maybe.andThen
                    (\plugin ->
                        Maybe.map2
                            (\upd st ->
                                upd url st
                                    |> T3.mapFirst (\s -> { state | {{name}} = Just s })
                                    |> T3.mapSecond (List.map (PluginInterface.Msg.mapOutMsg "{{name}}" Plugin.Msg.{{package}}Msg Plugin.Msg.{{package}}AddressMsg Plugin.Msg.{{package}}EntityMsg))
                                    |> T3.mapThird (Cmd.map Plugin.Msg.{{package}}Msg)
                            )
                            plugin.updateGraphByUrl
                            state.{{name}}
                    )
                |> Maybe.withDefault ( state, [], Cmd.none )
{{/plugins}} 
{{/plugins.length}} 


init : Plugins -> Plugin.Model.Flags -> ( Plugin.Model.ModelState, List Plugin.Msg.OutMsg, Cmd Plugin.Msg.Msg )
init plugins flags =
    {{^plugins}}n {}{{/plugins}}{{#plugins.length}}let
{{#plugins}}
        {{name}} =
            plugins.{{name}}
                |> Maybe.andThen .init
                |> Maybe.map (\init_ -> init_ flags.{{name}})

{{/plugins}} 
    in
    ( { {{#plugins}}{{name}} = Maybe.map T3.first {{name}}
      {{^last}}, {{/last}}{{/plugins}}
      }
    , [ {{#plugins}}Maybe.map T3.second {{name}}
            |> Maybe.withDefault []
            |> List.map (PluginInterface.Msg.mapOutMsg "{{name}}" Plugin.Msg.{{package}}Msg Plugin.Msg.{{package}}AddressMsg Plugin.Msg.{{package}}EntityMsg)
      {{^last}}, {{/last}}{{/plugins}}
      ]
        |> List.concat
    , [ {{#plugins}}Maybe.map T3.third {{name}}
            |> Maybe.withDefault Cmd.none
            |> Cmd.map Plugin.Msg.{{package}}Msg
      {{^last}}, {{/last}}{{/plugins}}
      ]
        |> Cmd.batch
    )
{{/plugins.length}} 


initAddress : Plugins -> Plugin.Model.AddressState
initAddress plugins =
    { {{#plugins}}{{name}} =
        plugins.{{name}}
            |> Maybe.andThen .initAddress
    {{^last}}, {{/last}}{{/plugins}}
    }


initEntity : Plugins -> Plugin.Model.EntityState
initEntity plugins =
    { {{#plugins}}{{name}} =
        plugins.{{name}}
            |> Maybe.andThen .initEntity
    {{^last}}, {{/last}}{{/plugins}}
    }


clearSearch : Plugins -> Plugin.Model.ModelState -> Plugin.Model.ModelState
clearSearch plugins states =
    {{^plugins}}states{{/plugins}}{{#plugins.length}}let
{{#plugins}}
        {{name}} =
            plugins.{{name}}
                |> Maybe.andThen
                    (\plugin ->
                        Maybe.map2
                            (\fun state -> fun state)
                            plugin.clearSearch
                            states.{{name}}
                    )
                |> Maybe.Extra.orElse states.{{name}}
{{/plugins}} 
    in
    { states
        | {{#plugins}}{{name}} = {{name}}
        {{^last}}, {{/last}}{{/plugins}}
    }
{{/plugins.length}} 


updateApiKeyHash : Plugins -> String -> Plugin.Model.ModelState -> ( Plugin.Model.ModelState, List Plugin.Msg.OutMsg, Cmd Plugin.Msg.Msg )
updateApiKeyHash plugins apiKeyHash state =
    {{^plugins}}n state{{/plugins}}{{#plugins.length}}let
{{#plugins}}
        {{name}} =
            plugins.{{name}}
                |> Maybe.andThen
                    (\plugin ->
                        Maybe.map2
                            (\fun model ->
                                fun apiKeyHash model
                                    |> T3.mapSecond (List.map (PluginInterface.Msg.mapOutMsg "{{name}}" Plugin.Msg.{{package}}Msg Plugin.Msg.{{package}}AddressMsg Plugin.Msg.{{package}}EntityMsg))
                                    |> T3.mapThird (Cmd.map Plugin.Msg.{{package}}Msg)
                            )
                            plugin.updateApiKeyHash
                            state.{{name}}
                    )
                |> Maybe.Extra.orElse (Maybe.map n state.{{name}})
{{/plugins}} 
    in
    ( { state
        | {{#plugins}}{{name}} = Maybe.map T3.first {{name}}
        {{^last}}, {{/last}}{{/plugins}}
      }
    , [ {{#plugins}}Maybe.map T3.second {{name}} |> Maybe.withDefault [] 
      {{^last}}, {{/last}}{{/plugins}}
      ]
        |> List.concat
    , [ {{#plugins}}Maybe.map T3.third {{name}} |> Maybe.withDefault Cmd.none
      {{^last}}, {{/last}}{{/plugins}}
      ]
        |> Cmd.batch
    )
{{/plugins.length}} 


updateApiKey : Plugins -> String -> Plugin.Model.ModelState -> ( Plugin.Model.ModelState, List Plugin.Msg.OutMsg, Cmd Plugin.Msg.Msg )
updateApiKey plugins apiKeyHash state =
    {{^plugins}}n state{{/plugins}}{{#plugins.length}}let
{{#plugins}}
        {{name}} =
            plugins.{{name}}
                |> Maybe.andThen
                    (\plugin ->
                        Maybe.map2
                            (\fun model ->
                                fun apiKeyHash model
                                    |> T3.mapSecond (List.map (PluginInterface.Msg.mapOutMsg "{{name}}" Plugin.Msg.{{package}}Msg Plugin.Msg.{{package}}AddressMsg Plugin.Msg.{{package}}EntityMsg))
                                    |> T3.mapThird (Cmd.map Plugin.Msg.{{package}}Msg)
                            )
                            plugin.updateApiKey
                            state.{{name}}
                    )
                |> Maybe.Extra.orElse (Maybe.map n state.{{name}})
{{/plugins}} 
    in
    ( { state
        | {{#plugins}}{{name}} = Maybe.map T3.first {{name}}
        {{^last}}, {{/last}}{{/plugins}}
      }
    , [ {{#plugins}}Maybe.map T3.second {{name}} |> Maybe.withDefault [] 
      {{^last}}, {{/last}}{{/plugins}}
      ]
        |> List.concat
    , [ {{#plugins}}Maybe.map T3.third {{name}} |> Maybe.withDefault Cmd.none
      {{^last}}, {{/last}}{{/plugins}}
      ]
        |> Cmd.batch
    )
{{/plugins.length}} 


newGraph : Plugins -> Plugin.Model.ModelState -> ( Plugin.Model.ModelState, List Plugin.Msg.OutMsg, Cmd Plugin.Msg.Msg )
newGraph plugins state =
    {{^plugins}}n state{{/plugins}}{{#plugins.length}}let
{{#plugins}}
        {{name}} =
            plugins.{{name}}
                |> Maybe.andThen
                    (\plugin ->
                        Maybe.map2
                            (\fun model ->
                                fun model
                                    |> T3.mapSecond (List.map (PluginInterface.Msg.mapOutMsg "{{name}}" Plugin.Msg.{{package}}Msg Plugin.Msg.{{package}}AddressMsg Plugin.Msg.{{package}}EntityMsg))
                                    |> T3.mapThird (Cmd.map Plugin.Msg.{{package}}Msg)
                            )
                            plugin.newGraph
                            state.{{name}}
                    )
                |> Maybe.Extra.orElse (Maybe.map n state.{{name}})
{{/plugins}} 
    in
    ( { state
        | {{#plugins}}{{name}} = Maybe.map T3.first {{name}}
        {{^last}}, {{/last}}{{/plugins}}
      }
    , [ {{#plugins}}Maybe.map T3.second {{name}} |> Maybe.withDefault [] 
      {{^last}}, {{/last}}{{/plugins}}
      ]
        |> List.concat
    , [ {{#plugins}}Maybe.map T3.third {{name}} |> Maybe.withDefault Cmd.none
      {{^last}}, {{/last}}{{/plugins}}
      ]
        |> Cmd.batch
    )
{{/plugins.length}} 


logout : Plugins -> Plugin.Model.ModelState -> ( Plugin.Model.ModelState, List Plugin.Msg.OutMsg, Cmd Plugin.Msg.Msg )
logout plugins state =
    {{^plugins}}n state{{/plugins}}{{#plugins.length}}let
{{#plugins}}
        {{name}} =
            plugins.{{name}}
                |> Maybe.andThen
                    (\plugin ->
                        Maybe.map2
                            (\fun model ->
                                fun model
                                    |> T3.mapSecond (List.map (PluginInterface.Msg.mapOutMsg "{{name}}" Plugin.Msg.{{package}}Msg Plugin.Msg.{{package}}AddressMsg Plugin.Msg.{{package}}EntityMsg))
                                    |> T3.mapThird (Cmd.map Plugin.Msg.{{package}}Msg)
                            )
                            plugin.logout
                            state.{{name}}
                    )
                |> Maybe.Extra.orElse (Maybe.map n state.{{name}})
{{/plugins}} 
    in
    ( { state
        | {{#plugins}}{{name}} = Maybe.map T3.first {{name}}
        {{^last}}, {{/last}}{{/plugins}}
      }
    , [ {{#plugins}}Maybe.map T3.second {{name}} |> Maybe.withDefault [] 
      {{^last}}, {{/last}}{{/plugins}}
      ]
        |> List.concat
    , [ {{#plugins}}Maybe.map T3.third {{name}} |> Maybe.withDefault Cmd.none
      {{^last}}, {{/last}}{{/plugins}}
      ]
        |> Cmd.batch
    )
{{/plugins.length}} 
